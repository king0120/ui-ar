# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

interface Experience {
    company: String!
    description: String
    director: String!
    id: String
    imageGuid: String
    project: String!
    role: String!
    showOnResume: Boolean
}

type ActorNote {
    audition: Audition!
    createdAt: String!
    for: User!
    id: String!
    owner: User!
    text: String!
    updatedAt: Float!
}

type Audition {
    address: String!
    auditionType: String!
    cloneAuditions: String!
    collateral: [AuditionCollateral!]
    createdAt: DateTime!
    description: String
    forRoles: [ProjectRole!]
    id: String!
    lat: Float!
    long: Float!
    name: String!
    open: Boolean
    prep: String
    private: Boolean
    project: Project!
    questions: [AuditionQuestion!]
    requirementSummary: String
    startDate: DateTime
    talent: [AuditionTalentInstance!]
    timeSlots: [AuditionTimeSlot!]!
    updatedAt: DateTime!
}

type AuditionAnswers {
    id: String
    question: String
    text: String
    user: String
}

type AuditionCollateral {
    audition: Audition!
    createdAt: String!
    id: String!
    role: ProjectRole!
    s3Key: String!
    user: User!
}

type AuditionQuestion {
    audition: Audition!
    id: String!
    text: String!
}

type AuditionTalentInstance {
    audition: Audition!
    callBack: String
    createdAt: DateTime!
    decision: String
    hasConflicts: Boolean
    id: String!
    projectId: Float
    registered: Boolean
    selfSignup: String
    status: String!
    timeSlot: AuditionTimeSlot
    updatedAt: DateTime!
    user: User
    walkIn: String
}

type AuditionTimeSlot {
    audition: Audition
    endTime: DateTime
    id: String!
    startTime: DateTime
    talent: AuditionTalentInstance
}

type BreakdownAttribute {
    category: Float!
    createdAt: String!
    id: String!
    projectRole: ProjectRole!
    type: Float!
    user: User!
    value: String!
}

type CommercialExperience implements Experience {
    company: String!
    description: String
    director: String!
    id: String
    imageGuid: String
    project: String!
    role: String!
    showOnResume: Boolean
    user: User!
}

type FilmExperience implements Experience {
    company: String!
    description: String
    director: String!
    id: String
    imageGuid: String
    project: String!
    role: String!
    showOnResume: Boolean
    user: User!
}

type FormattedBreakdown {
    ageRange: [String!]
    ethnicity: [String!]
    gender: [String!]
    unions: [String!]
    vocalRange: [String!]
}

type FormattedCollateral {
    key: String
    url: String
}

type LoginResponse {
    accessToken: String!
    displayName: String!
    userId: String!
}

type MailEntity {
    id: String!
    status: String!
    to: String!
}

type MusicalTheatreExperience implements Experience {
    company: String!
    description: String
    director: String!
    id: String
    imageGuid: String
    project: String!
    role: String!
    showOnResume: Boolean
    user: User!
}

type Mutation {
    addExperience(data: AddExperienceDTO!): Boolean
    addNote(input: CreateNoteDTO!): ActorNote!
    addUserBreakdown(key: String!): Boolean
    closeAudition(auditionId: String!): Audition!
    createAudition(audition: CreateAuditionDTO!, projectId: String!): Audition!
    createTimeslot(data: CreateTimeSlotDTO!): AuditionTimeSlot!
    deleteAudition(auditionId: String!): Audition!
    deleteImage(key: String!): Boolean
    deleteProject(id: String!): Boolean
    deleteTimeSlot(data: DeleteTimeSlotDTO!): Boolean!
    inviteToAudition(auditionId: String!, projectId: String!, timeSlotId: String, userId: String!): AuditionTalentInstance!
    login(email: String!, password: String!): LoginResponse!
    removeExperience(data: AddExperienceDTO!): Boolean
    removeNote(id: String!): Boolean
    removeTalentFromTimeSlot(data: DeleteTimeSlotDTO!): Boolean!
    respondToAuditionInvite(answerToQuestions: [AnswerToQuestions!]!, email: String!, response: String!, responseCode: String!): Audition!
    sendRejectionEmails(projectId: String!): Boolean
    setProfile(key: String!): Boolean
    updateTalentInstance(decision: String, instanceId: String): Boolean
}

type OperaExperience implements Experience {
    company: String!
    description: String
    director: String!
    id: String
    imageGuid: String
    project: String!
    role: String!
    showOnResume: Boolean
    user: User!
}

type Organization {
    aboutUs: String!
    address: String!
    contactPhoneNumber: String!
    contractsOfferred: String!
    eid: String!
    id: String!
    irsStatus: String!
    lat: Float!
    long: Float!
    members: [User!]!
    name: String!
    owner: User!
    projects: [Project!]!
    website: String!
}

type Project {
    auditions: [Audition!]!
    createdAt: DateTime!
    director: String!
    id: String!
    name: String!
    notes: String
    organizationId: Organization!
    performanceDateEnd: DateTime
    performanceDateStart: DateTime
    photoS3Key: String
    rehearsalDateEnd: DateTime
    rehearsalDateStart: DateTime
    rejected: [ProjectRejectedUser!]
    roles: [ProjectRole!]!
    status: String
    summary: String
    updatedAt: DateTime!
    writer: String!
}

type ProjectRejectedUser {
    project: Project
    rejectionEmailSent: Boolean
    user: User
}

type ProjectRole {
    breakdown: FormattedBreakdown
    castTo: User
    characterName: String!
    characterSummary: String!
    collateral: [FormattedCollateral!]!
    id: String!
    inAuditions: [Audition!]!
    movementRequirements: String
    project: Project!
}

type Query {
    getAllOrganizationsForUser: UserOrganizations!
    getAllProjects(organizationId: String!): [Project!]!
    getAllRoles(projectId: String!): [ProjectRole!]!
    getAudition(auditionId: String!): Audition!
    getAuditionsForProject(projectId: String!): [Audition!]!
    getNotes(actorId: String!): [ActorNote!]!
    getOneOrganization(organizationId: String!): Organization!
    getOneProject(projectId: String!): Project!
    getRole(roleId: String!): ProjectRole!
    getUser(id: String!): User!
    searchForAuditions(query: String!): [Audition!]!
    tokenCheck: User!
}

type TelevisionExperience implements Experience {
    company: String!
    description: String
    director: String!
    id: String
    imageGuid: String
    project: String!
    role: String!
    showOnResume: Boolean
    user: User!
}

type TheatreExperience implements Experience {
    company: String!
    description: String
    director: String!
    id: String
    imageGuid: String
    project: String!
    role: String!
    showOnResume: Boolean
    user: User!
}

type User {
    breakdown: FormattedBreakdown!
    castIn: [ProjectRole!]!
    city: String
    commercialExperience: [CommercialExperience!]!
    createdAt: String!
    displayName: String
    email: String!
    emailConfirmed: Boolean!
    filmExperience: [FilmExperience!]!
    firstName: String!
    gender: String!
    heightInches: Float
    id: String!
    instances: [AuditionTalentInstance!]!
    lastName: String!
    musicalTheatreExperience: [MusicalTheatreExperience!]!
    notes: [ActorNote!]!
    operaExperience: [OperaExperience!]!
    organizations: [Organization!]!
    ownedOrgs: [Organization!]!
    phoneNumber: String!
    profileImages: [UserImage!]!
    profilePicture: UserImage
    rejections: [ProjectRejectedUser!]
    state: String
    televisionExperience: [TelevisionExperience!]!
    theatreExperience: [TheatreExperience!]!
    updatedAt: Float!
    userType: [UserType!]!
    verified: Boolean!
    website: String
    weightLbs: Float
}

type UserImage {
    createdAt: String!
    id: String!
    isPrimary: Boolean!
    s3Key: String!
    url: String
    user: User!
}

type UserOrganizations {
    member: [Organization!]!
    owned: [Organization!]!
}

"What type of user is this? Admin or Actor"
enum UserType {
    actor
    admin
    theatre
}

input AddExperienceDTO {
    experience: ExperienceInput
    experienceId: String
    experienceType: String!
}

input AnswerToQuestions {
    questionId: String!
    text: String!
    userId: String!
}

input CreateAuditionDTO {
    address: String!
    auditionType: String!
    cloneAuditions: [String!]!
    description: String!
    forRoles: [String!]!
    lat: Float!
    long: Float!
    name: String!
    prep: String
    private: Boolean!
    questions: [String!]!
    requirementSummary: String
    startDate: DateTime!
}

input CreateNoteDTO {
    audition: String!
    for: String!
    owner: String
    text: String!
}

input CreateTimeSlotDTO {
    auditionId: String
    endTime: DateTime!
    startTime: DateTime!
}

input DeleteTimeSlotDTO {
    auditionId: String
    id: String!
}

input ExperienceInput {
    company: String!
    description: String
    director: String!
    id: String
    imageGuid: String
    project: String!
    role: String!
    showOnResume: Boolean
}


"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime
